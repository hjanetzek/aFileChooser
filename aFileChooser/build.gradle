buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
        // for aar/maven stuff
	// https://github.com/dcendents/android-maven-plugin
        classpath 'com.github.dcendents:android-maven-plugin:1.0'
    }
}

apply plugin: 'android-library'
apply plugin: 'android-maven'
//apply plugin: 'signing'
apply plugin: 'eclipse'


dependencies {
    repositories {
        mavenCentral()
	maven { url "${System.env.ANDROID_HOME}/extras/android/m2repository" }
    }
    //provided files ("libs/android-support-v4.jar")
    compile 'com.android.support:support-v4:19.1.0'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
        }
    }
}


//signing {
//    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
//    sign configurations.archives
//}

group = 'io.github.hjanetzek.afilechooser'
version = 1.12

eclipse {
  classpath {
    plusConfigurations += configurations.compile

    //customizing the classes output directory:
    defaultOutputDir = file('bin/classes')

    file {
      // Manipulation of the classpath XML before merging local
      // and generated copies
      beforeMerged { classpath ->
        // Remove all source entries to avoid overlap
        classpath.entries.removeAll() { c ->
          c.kind == 'src'
        }
      }

      // only used to explode jni .so into aar
      whenMerged { classpath ->
        classpath.entries.findAll { entry ->
          entry.path.contains('native-libs') }*.exported = false
      }

      // Direct manipulation of the generated classpath XML
      withXml {
        // Since non-default source directories are used
        // they need to be manually added to the classpath XML
        def node = it.asNode()
        // Main source directory and generated code directory
        node.appendNode('classpathentry kind="src" path="src"')
        node.appendNode('classpathentry kind="src" path="gen"')

      }
    }
  }
  project {
    natures = ['com.android.ide.eclipse.adt.AndroidNature',
               'org.eclipse.jdt.core.javanature']
    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'
  }
}

